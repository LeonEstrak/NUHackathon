{"version":3,"sources":["Components/submitImageButton.js","Components/clearImageButton.js","App.js","serviceWorker.js","index.js"],"names":["SubmitButton","state","style","background","borderRadius","border","color","height","padding","boxShadow","position","bottom","left","Button","type","className","this","onClick","props","Component","ClearButton","right","label","React","App","textAlign","fetchStream","reader","a","read","done","value","onSubmit","e","preventDefault","image","FileReader","readAsDataURL","onload","console","warn","target","result","fetch","method","body","then","response","json","string","log","setState","willRender","catch","error","onClear","document","querySelector","click","baseState","Box","withPreview","onChange","ref","singleImage","labelStyles","buttonText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ab8af905.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button} from '@material-ui/core';\n\nclass SubmitButton extends Component {\n  state = {};\n\n  style = {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    position: 'absolute',\n    bottom: '10%',\n    left: '30%',\n    // position: 'relative',\n    // right: '20%',\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          type='submit'\n          className='Submit'\n          style={this.style}\n          onClick={this.props.onClick}>\n          Submit\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default SubmitButton;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\n\nclass ClearButton extends React.Component {\n  state = {};\n  constructor(props) {\n    super();\n    this.label = props.label;\n  }\n\n  style = {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    position: 'absolute',\n    bottom: '10%',\n    right: '30%',\n    // position: 'relative',\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          onClick={this.props.onClick}\n          className='Submit'\n          style={this.style}>\n          Clear\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default ClearButton;\n","import React from 'react';\n// import logo from './logo.svg';\nimport SubmitButton from './Components/submitImageButton';\nimport ClearButton from './Components/clearImageButton';\nimport {Box} from '@material-ui/core';\nimport './App.css';\nimport ImageUploader from 'react-images-upload';\n\n// import {  } from \"@material-ui/\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null,\n      result: '',\n      willRender: false,\n    };\n    this.baseState = this.state;\n  }\n\n  style = {\n    // borderColor: '#646e82',\n    // color: '#646e82',\n    // maxHeight: '50%',\n    // width: '50%',\n    padding: '5% 5% 5% 5%',\n    // border: 'rounded',\n    // borderStyle: 'dashed',\n    textAlign: 'center',\n  };\n\n  fetchStream = async (reader) => {\n    let {done, value} = await reader.read();\n    if (!value) value = [];\n    if (done) return value;\n    else return [...value, ...(await this.fetchStream(reader))];\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!this.state.image) return null;\n\n    let reader = new FileReader();\n    reader.readAsDataURL(this.state.image[0]);\n    reader.onload = (e) => {\n      console.warn(e.target.result);\n\n      fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: e.target.result,\n      })\n        .then((response) => {\n          response.json().then((string) => {\n            console.log(string);\n            this.setState({\n              result: string['status'],\n              willRender: true,\n            });\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n  };\n\n  onClear = (e) => {\n    console.log('Clear Button');\n    try {\n      document\n        .querySelector('.fileUploader .fileContainer .deleteImage')\n        .click();\n    } catch (error) {\n      console.warn(error);\n    }\n    this.setState(this.baseState);\n  };\n\n  render() {\n    return (\n      <div>\n        <Box style={this.style}>\n          <ImageUploader\n            withPreview={true}\n            onChange={(image) => {\n              this.setState({image});\n            }}\n            ref='uploader'\n            singleImage={true}\n            labelStyles={{\n              color: '#646e82',\n            }}\n            label='Max. Upload Size is 5mb. Only .jpg and .png'\n            buttonText='Choose an Image'\n          />\n        </Box>\n        {this.state.willRender ? (\n          <h1>\n            Result:{' '}\n            <span style={{color: this.state.result ? '#32a852' : '#a83c32'}}>\n              {this.state.result ? 'Fresh' : 'Rotten'}\n            </span>\n          </h1>\n        ) : (\n          ''\n        )}\n        <SubmitButton onClick={this.onSubmit} />\n        <ClearButton onClick={this.onClear} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}